{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SPITE Vulkan Graphics Engine - Documentation Overview","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The SPITE (Scalable Performance-Intensive Technology Engine) is a modern 3D graphics engine built on data-oriented design principles and leveraging the Vulkan API for maximum performance. The engine employs an Entity-Component-System (ECS) architecture to manage complex rendering scenarios while maintaining high performance and scalability.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Data-Oriented Design: Optimized for cache locality and parallel processing.</li> <li>ECS Architecture: Modular and extensible component-based system.</li> <li>Vulkan Integration: Low-overhead GPU control with explicit resource management.</li> <li>Deferred Rendering: Multi-pass rendering pipeline for complex lighting scenarios.</li> <li>Cross-Platform: Designed for cross-platform potential.</li> </ul>"},{"location":"#architectural-overview","title":"Architectural Overview","text":"<p>The SPITE engine is divided into three main layers:</p> <ul> <li>Base Layer: Provides platform abstraction and fundamental utilities like memory management, file I/O, and logging.</li> <li>Application Layer: Manages the application framework, windowing, input, and events.</li> <li>Engine Layer: Contains the core graphics engine functionality, including the ECS framework, Vulkan integration, and rendering systems.</li> </ul> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 SPITE ENGINE ARCHITECTURE                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 \u2502 APPLICATION   \u2502 \u2502 ENGINE        \u2502 \u2502 BASE          \u2502       \u2502\n\u2502 \u2502 LAYER         \u2502 \u2502 LAYER         \u2502 \u2502 LAYER         \u2502       \u2502\n\u2502 \u2502               \u2502 \u2502               \u2502 \u2502               \u2502       \u2502\n\u2502 \u2502 \u2022 Window Mgmt \u2502 \u2502 \u2022 ECS Core    \u2502 \u2502 \u2022 Memory      \u2502       \u2502\n\u2502 \u2502 \u2022 Input Sys   \u2502 \u2502 \u2022 Rendering   \u2502 \u2502 \u2022 Logging     \u2502       \u2502\n\u2502 \u2502 \u2022 Event Mgmt  \u2502 \u2502 \u2022 Resources   \u2502 \u2502 \u2022 File I/O    \u2502       \u2502\n\u2502 \u2502 \u2022 Time Mgmt   \u2502 \u2502 \u2022 Scene Graph \u2502 \u2502 \u2022 Math Utils  \u2502       \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502                                                             \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502\n                  \u2502                                           \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                               \u2502\n        \u2502 VULKAN API          \u2502                               \u2502\n        \u2502 (Graphics Driver)   \u2502                               \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>(This section is a placeholder. You can add instructions on how to build, run, and use the SPITE engine here.)</p>"},{"location":"#further-information","title":"Further Information","text":"<p>This documentation provides a high-level overview of the SPITE engine. For more detailed information on specific components and systems, please refer to the other sections of this documentation.</p>"},{"location":"ecs/","title":"Overview","text":""},{"location":"ecs/#ecs-framework-design","title":"ECS Framework Design","text":""},{"location":"ecs/#core-concepts","title":"Core Concepts","text":""},{"location":"ecs/#entities","title":"Entities","text":"<ul> <li>Unique identifiers (64-bit ID + version)</li> <li>Containers for components</li> <li>No behavior, only data aggregation</li> </ul>"},{"location":"ecs/#components","title":"Components","text":"<p>Four component types based on usage patterns:</p> <ol> <li> <p>IComponent: Standard per-entity data <pre><code>struct TransformComponent : IComponent {\n    glm::vec3 position{0.0f};\n    glm::vec3 rotation{0.0f};\n    glm::vec3 scale{1.0f};\n};\n</code></pre></p> </li> <li> <p>ISingletonComponent: Global application state <pre><code>struct VulkanInstanceComponent : ISingletonComponent {\n    vk::Instance instance;\n};\n</code></pre></p> </li> <li> <p>ISharedComponent: Immutable shared data <pre><code>struct TextureComponent : ISharedComponent {\n    Image texture;\n    vk::ImageView imageView;\n    vk::Sampler sampler;\n};\n</code></pre></p> </li> <li> <p>IEventComponent: Asynchronous communication <pre><code>struct ModelLoadRequest : IEventComponent {\n    Entity entity;\n    std::string objFilePath;\n    std::string vertShaderPath;\n    std::string fragShaderPath;\n};\n</code></pre></p> </li> </ol>"},{"location":"ecs/#systems","title":"Systems","text":"<ul> <li>Process components in bulk</li> <li>Stateless where possible</li> <li>Dependency tracking for activation/deactivation</li> </ul>"},{"location":"ecs/#memory-management-strategy","title":"Memory Management Strategy","text":""},{"location":"ecs/#component-storage","title":"Component Storage","text":"<ul> <li>Structure of Arrays: Components stored in contiguous arrays</li> <li>Cache-friendly: Optimal memory layout for system iteration</li> <li>TODO: Aspect</li> </ul>"},{"location":"ecs/#query-caching","title":"Query Caching","text":"<ul> <li>Cached query results for frequently accessed component combinations</li> <li>Automatic invalidation on structural changes</li> <li>Minimal overhead for system execution</li> </ul>"}]}